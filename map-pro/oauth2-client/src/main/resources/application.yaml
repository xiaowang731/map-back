server:
  # 修改端口
  port: 8000

spring:
  application:
    name: oauth2-client
  security:
    oauth2:
      client:
        provider:
          # 认证提供者,自定义名称
          custom-issuer:
            # Token签发地址(认证服务地址)
            issuer-uri: http://192.168.1.7:10001
            # 获取用户信息的地址，默认的/userinfo端点需要IdToken获取，为避免麻烦自定一个用户信息接口
            user-info-uri: ${spring.security.oauth2.client.provider.custom-issuer.issuer-uri}/user
        registration:
          # registration Id，自定义
          messaging-client-oidc:
            # oauth认证提供者配置，和上边配置的认证提供者关联起来
            provider: custom-issuer
            # 客户端名称，自定义
            client-name: message-client
            # 客户端id，从认证服务申请的客户端id
            client-id: messaging-client
            # 客户端秘钥
            client-secret: 123456
            # 客户端认证方式
            client-authentication-method: client_secret_basic
            # 获取Token使用的授权流程
            authorization-grant-type: authorization_code
            # 回调地址，这里设置为Spring Security Client默认实现使用code换取token的接口
            redirect-uri: http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc
            scope:
              - message.read
              - message.write

  datasource:
    url: jdbc:mysql://localhost:3306/j?rewriteBatchedStatements=true&allowMultiQueries=true
    username: root
    password: 123456
  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      timeout: 10000
      lettuce:
        pool:
          # 最大连接数(使用负值表示没有限制) 默认为 8
          max-active: 10
          # 最大阻塞等待时间(使用负值表示没有限制) 默认为 -1 ms
          max-wait: -1
          # 最大空闲连接 默认为 8
          max-idle: 5
          # 最小空闲连接 默认为 0
          min-idle: 0