server:
  port: 10001

spring:
  application:
    name: oauth-service
  datasource:
    url: jdbc:mysql://localhost:3306/j?rewriteBatchedStatements=true&allowMultiQueries=true
    username: root
    password: 123456
  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      timeout: 10000
      lettuce:
        pool:
          # 最大连接数(使用负值表示没有限制) 默认为 8
          max-active: 10
          # 最大阻塞等待时间(使用负值表示没有限制) 默认为 -1 ms
          max-wait: -1
          # 最大空闲连接 默认为 8
          max-idle: 5
          # 最小空闲连接 默认为 0
          min-idle: 0


#  security:
#    oauth2:
#      client:
#        registration:
#          github-idp:
#            provider: github
#            client-id: 2205af0f0cc93e3a22ea
#            client-secret: 649d88df840a57d2591c4832b438cc9af2727240
#            #            redirect-uri: http://192.168.56.1:9000/login/oauth2/code/github-idp # 这个地方可以不配置，配置就要与github的应用配置回调一致
#            scope: user:email, read:user
#            client-name: Sign in with GitHub
#          gitee:
#            # 指定oauth登录提供者，该oauth登录由provider中的gitee来处理
#            provider: gitee
#            # 客户端名字
#            client-name: Sign in with Gitee
#            # 认证方式
#            authorization-grant-type: authorization_code
#            # 客户端id，使用自己的gitee的客户端id
#            client-id: 29b85c97ed682910eaa4276d84a0c4532f00b962e1b9fe8552520129e65ae432
#            # 客户端秘钥，使用自己的gitee的客户端秘钥
#            client-secret: 8c6df920482a83d4662a34b76a9c3a62c8e80713e4f2957bb0459c3ceb70d73b
#            # 回调地址 与gitee 配置的回调地址一致才行
#            redirect-uri: http://192.168.56.1:9000/login/oauth2/code/gitee
#            # 申请scope列表
#            scope:
#              - emails
#              - user_info
#        provider:
#          github:
#            user-name-attribute: login
#          gitee:
#            # 设置用户信息名称对应的字段属性
#            user-name-attribute: login
#            # 获取token的地址
#            token-uri: https://gitee.com/oauth/token
#            # 获取用户信息的地址
#            user-info-uri: https://gitee.com/api/v5/user
#            # 发起授权申请的地址
#            authorization-uri: https://gitee.com/oauth/authorize

mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#日志配置（logback）
logging:
  file:
    #日志文件路径
    path: log
    #日志文件名称
    name: ${logging.file.path}/${spring.application.name}.log
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} %clr(%5p) %clr(${PID:-}){magenta} --- %clr([%15.15t]@[%19(%X{traceId})]){faint} %clr(%-40.40logger{39}){cyan} : %m%n'
    file: '%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:-} --- [%15.15t]@[%19(%X{traceId})] %-40.40logger{39} : %m%n'
  logback:
    rollingpolicy:
      #用于创建日志归档的文件名模式
      file-name-pattern: ${logging.file.path}/%d{yyyy-MM-dd,aux}/${spring.application.name}.%d{yyyy-MM-dd_HH}.%i.log
      #日志文件归档前的最大尺寸（文件最大体积，达到这个体积就会归档）。
      max-file-size: 5GB
      #要保留的归档日志文件的最大天数（默认为7）
      max-history: 7
      #应用程序启动时，是否行日志归档清理
      clean-history-on-start: false
      #日志档案在被删除前的最大尺寸（归档文件最大占用大小，超过这个大小后会被删除）
      total-size-cap: 5GB
  level:
    org.springframework.security: DEBUG
    org.springframework.security.web: DEBUG
    org.springframework.security.authentication: DEBUG
    org.springframework.security.core: DEBUG
    org.springframework.security.oauth2: DEBUG
    com.baomidou.mybatisplus.core: DEBUG
    org.mybatis.spring: DEBUG
    com.baomidou.mybatisplus.extension.plugins: DEBUG
    com.baomidou.mybatisplus.core.MybatisPlus: DEBUG
    org.mybatis: DEBUG

